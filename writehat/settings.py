"""
Django settings for WRITEHAT project.

Generated by 'django-admin startproject' using Django 2.1.8.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from writehat.lib.startup import *
from writehat.templatetags.custom_tags import *

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Don't append forward-slash to end of URLs:
APPEND_SLASH = False
LOGIN_URL = '/login'
LOGOUT_URL = '/'
LOGIN_REDIRECT_URL = '/home'
LOGOUT_REDIRECT_URL = '/'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/
SECRET_KEY = writehat_config['writehat']['secret']
DEBUG = writehat_config['writehat']['debug']

ALLOWED_HOSTS = writehat_config['writehat']['allowed_hosts']
CSRF_TRUSTED_ORIGINS = ALLOWED_HOSTS


# LDAP CONFIGURATION
LDAP_AUTH_URL = writehat_config['ldap']['url']
LDAP_AUTH_USE_TLS = writehat_config['ldap']['tls']
LDAP_AUTH_SEARCH_BASE = writehat_config['ldap']['base']
LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN = writehat_config['ldap']['domain']
LDAP_AUTH_CONNECTION_USERNAME = writehat_config['ldap']['username']
LDAP_AUTH_CONNECTION_PASSWORD = writehat_config['ldap']['password']

# The LDAP class that represents a user.
LDAP_AUTH_OBJECT_CLASS = "user"

# User model fields mapped to the LDAP
# attributes that represent them.
LDAP_AUTH_USER_FIELDS = {
    "username": "sAMAccountName",
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}

# A tuple of django model fields used to uniquely identify a user.
LDAP_AUTH_USER_LOOKUP_FIELDS = ("username",)

# Path to a callable that takes a dict of {model_field_name: value},
# returning a dict of clean model data.
# Use this to customize how data loaded from LDAP is saved to the User model.
LDAP_AUTH_CLEAN_USER_DATA = "django_python3_ldap.utils.clean_user_data"

# Path to a callable that takes a user model and a dict of {ldap_field_name: [value]},
# and saves any additional user relationships based on the LDAP data.
# Use this to customize how data loaded from LDAP is saved to User model relations.
# For customizing non-related User model fields, use LDAP_AUTH_CLEAN_USER_DATA.
LDAP_AUTH_SYNC_USER_RELATIONS = "django_python3_ldap.utils.sync_user_relations"

# Path to a callable that takes a dict of {ldap_field_name: value},
# returning a list of [ldap_search_filter]. The search filters will then be AND'd
# together when creating the final search filter.
LDAP_AUTH_FORMAT_SEARCH_FILTERS = "django_python3_ldap.utils.format_search_filters"

# Path to a callable that takes a dict of {model_field_name: value}, and returns
# a string of the username to bind to the LDAP server.
# Use this to support different types of LDAP server.
LDAP_AUTH_FORMAT_USERNAME = "django_python3_ldap.utils.format_username_active_directory_principal"

# Set connection/receive timeouts (in seconds) on the underlying `ldap3` library.
LDAP_AUTH_CONNECT_TIMEOUT = None
LDAP_AUTH_RECEIVE_TIMEOUT = None

# Added /api/* to prevent the middleware authentication from applying
LOGIN_REQUIRED_IGNORE_PATHS = ["/adminlogin/", r'/api/(.*)$']

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# Defining Swagger settings

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
      'api_key': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
      }
   },
   "USE_SESSION_AUTH": False
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'writehat',
    'django_python3_ldap',
    'rest_framework',
    'writehat_api',
    'drf_yasg',
    'rest_framework.authtoken',
]

AUTHENTICATION_BACKENDS =('django.contrib.auth.backends.ModelBackend', 'django_python3_ldap.auth.LDAPBackend')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'writehat.lib.LoginRequiredMiddleware.LoginRequiredMiddleware',
    'django_currentuser.middleware.ThreadLocalUserMiddleware'
]


ROOT_URLCONF = 'writehat.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'writehat.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

MONGO_CONFIG = writehat_config['mongo']
MYSQL_CONFIG = writehat_config['mysql']

import pymysql
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': MYSQL_CONFIG['host'],
        'PORT': int(MYSQL_CONFIG['port']),
        'NAME': MYSQL_CONFIG['database'],
        'USER': MYSQL_CONFIG['user'],
        'PASSWORD': MYSQL_CONFIG['password']
    }
}

# Fake PyMySQL's version and install as MySQLdb
# https://adamj.eu/tech/2020/02/04/how-to-use-pymysql-with-django/
pymysql.version_info = (1, 4, 2, "final", 0)
pymysql.install_as_MySQLdb()

# fix django.db.migrations.exceptions.InvalidBasesError: Cannot resolve bases for [<ModelState: 'writehat.AssigneeUser'>]
fixMigrationBug()

# set up mongo connection
MONGO_DB = get_db_obj(
    host=MONGO_CONFIG['host'],
    port=int(MONGO_CONFIG['port']),
    database=MONGO_CONFIG['database'],
    username=MONGO_CONFIG['user'],
    password=MONGO_CONFIG['password'],
)

# Detect valid components
COMPONENT_CLASSES = getComponentList()
VALID_COMPONENTS = getComponentListJSON()

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = writehat_config['writehat']['timezone']

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = 'writehat/static'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '{asctime} - {levelname:7s} - {filename}:{lineno: 5} - {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'formatter': 'simple',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'WARN'),
        },
        'writehat': {
            'handlers': ['console'],
            'level': os.getenv('WRITEHAT_LOG_LEVEL', 'DEBUG'),
        },
        'writehat.models': { 'level': 'DEBUG' },
        'writehat.views': { 'level': 'DEBUG' },
        'writehat.components.base': { 'level': 'DEBUG' },
        'writehat.lib.finding': { 'level': 'DEBUG' },
        'writehat.lib.db': { 'level': 'DEBUG' }
    },
}

MAX_REVISIONS = 250

from django import template

register = template.Library()

# create an admin user if one doesn't exist
createAdminUser()
